// Mixins

/**
 * [topNav Top nav builder]
 * @param  {[type]} $head-nav-height    [description]
 * @param  {[type]} $head-nav-bg        [description]
 * @param  {[type]} $head-nav-textColor [description]
 * @return {[type]}                     [description]
 */

@mixin topNav($head-nav-height, $head-nav-bg, $head-nav-textColor) {
    height: $head-nav-height;
    background: $head-nav-bg;
    color: $head-nav-textColor;
}

@mixin sideNav-default($left-sb-width) {
    width: $left-sb-width;
}


/**
 * [listItems Sidenav list]
 * @param  {[type]} $left-sb-lineheight [description]
 * @return {[type]}                     [description]
 */

@mixin sideNav-listItems($left-sb-lineheight) {
    line-height: $left-sb-lineheight;
    color: $sidenav-font-color;
}

@mixin sideNav-anchor($left-sb-height, $left-sb-lineheight, $font-size) {
    height: $left-sb-height;
    line-height: $left-sb-lineheight;
    font-size: $font-size;
    color: $sidenav-font-color;
}

// Border radius
@mixin border-radius($radius) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    -ms-border-radius: $radius;
    border-radius: $radius;
}

// Box shadow
@mixin box-shadow($top, $left, $blur, $color, $inset: false) {
    @if $inset {
        -webkit-box-shadow: inset $top $left $blur $color;
        -moz-box-shadow: inset $top $left $blur $color;
        box-shadow: inset $top $left $blur $color;
    }
    @else {
        -webkit-box-shadow: $top $left $blur $color;
        -moz-box-shadow: $top $left $blur $color;
        box-shadow: $top $left $blur $color;
    }
}

@function convert-angle($value, $unit) {
    $convertable-units: deg grad turn rad;
    $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
    @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
        @return $value / nth($conversion-factors, index($convertable-units, unit($value))) * nth($conversion-factors, index($convertable-units, $unit));
    }
    @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

/// Test if `$value` is an angle
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
    $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
    $is-angle: type-of($value)=='number' and index('deg' 'grad' 'turn' 'rad', unit($value));
    @return $is-direction or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
@function legacy-direction($value) {
    @if is-direction($value)==false {
        @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
    }
    $conversion-map: ( to top: bottom, to top right: bottom left, to right top: left bottom, to right: left, to bottom right: top left, to right bottom: left top, to bottom: top, to bottom left: top right, to left bottom: right top, to left: right, to left top: right bottom, to top left: bottom right);
    @if map-has-key($conversion-map, $value) {
        @return map-get($conversion-map, $value);
    }
    @return 90deg - convert-angle($value, 'deg');
}

/// Mixin printing a linear-gradient 
/// as well as a plain color fallback 
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
    @if is-direction($direction)==false {
        $color-stops: ($direction, $color-stops);
        $direction: 180deg;
    }
    background: nth(nth($color-stops, 1), 1);
    background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
    background: linear-gradient($direction, $color-stops);
}

@mixin setWave() {
    @extend .waves-#{$setWave};
}

@mixin scrollbar-track() {
    @if $head-nav-bg==#4db6ac {
        @include box-shadow(0, 0, 6px, rgba(38, 166, 154, 0.3), true);
    }
    @elseif $head-nav-bg==#ee6e73 {
        @include box-shadow(0, 0, 6px, rgba(238, 110, 115, 0.8), true);
    }
    @else {
        @include box-shadow(0, 0, 6px, rgba(0, 0, 0, 0.3), true);
    }
}

@mixin scrollbar-thumb() {
    @if $head-nav-bg==#4db6ac {
        @include box-shadow(0, 0, 6px, rgba(89, 166, 154, 0.8), true);
    }
    @elseif $head-nav-bg==#ee6e73 {
        @include box-shadow(0, 0, 6px, rgba(238, 110, 115, 0.8), true);
    }
    @else {
        @include box-shadow(0, 0, 6px, rgba(0, 0, 0, 0.8), true);
    }
}

@mixin morph-box-shadow() {
    @if $head-nav-bg==#4db6ac {
        @include box-shadow(0, 0, 10px, rgba(0, 0, 0, 0.4), true);
    }
    @elseif $head-nav-bg==#ee6e73 {
        @include box-shadow(0, 0, 10px, rgba(0, 0, 0, 0.4), true);
    }
    @else {
        @include box-shadow(0, 0, 10px, rgba(0, 0, 0, 0.4), true);
    }
}

@mixin menu-anim($animation) {
    animation: $animation 1s;
    animation-iteration-count: 1;
    transform-origin: 50% 50%;
    animation-fill-mode: forwards;
    /*when the spec is finished*/
    -webkit-animation: $animation 1s;
    -webkit-animation-iteration-count: 1;
    -webkit-transform-origin: 50% 50%;
    -webkit-animation-fill-mode: forwards;
    /*Chrome 16+, Safari 4+*/
    -moz-animation: $animation 1s;
    -moz-animation-iteration-count: 1;
    -moz-transform-origin: 50% 50%;
    -moz-animation-fill-mode: forwards;
    /*FF 5+*/
    -o-animation: $animation 1s;
    -o-animation-iteration-count: 1;
    -o-transform-origin: 50% 50%;
    -o-animation-fill-mode: forwards;
    /*Not implemented yet*/
    -ms-animation: $animation 1s;
    -ms-animation-iteration-count: 1;
    -ms-transform-origin: 50% 50%;
    -ms-animation-fill-mode: forwards;
    /*IE 10+*/
}

@mixin spanBadge($color, $content) {
    font-weight: 300;
    font-size: 0.8rem;
    color: #fff;
    background-color: $color;
    -webkit-border-radius: 2px;
    border-radius: 2px;
    &:after {
        content: $content;
    }
}

@mixin overlay($background, $width, $height, $index) {
    content: '';
    background-color: $background;
    position: absolute;
    top: 0;
    left: 0;
    width: $width;
    height: $height;
    z-index: $index;
}

/// Mixin to customize scrollbars
@mixin scrollbars($size, $foreground-color, $background-color: mix($foreground-color, white, 50%)) {
    // For Google Chrome
     ::-webkit-scrollbar {
        width: $size;
        height: $size;
    }
     ::-webkit-scrollbar-thumb {
        background: $foreground-color;
    }
     ::-webkit-scrollbar-track {
        background: $background-color;
    }
    // For Internet Explorer
    body {
        scrollbar-face-color: $foreground-color;
        scrollbar-track-color: $background-color;
    }
}